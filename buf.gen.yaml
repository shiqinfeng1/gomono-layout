# 配置protoc生成规则
version: v2

managed:
  enabled: true
  override:
    - file_option: go_package_prefix
      value: github.com/gomono-layout/api/gen
plugins:
  # 使用go插件生成go代码
  - local: protoc-gen-go
    out: api/gen
    opt: paths=source_relative # 使用相对路径

  # 使用go-grpc插件生成gRPC服务代码
  - local: protoc-gen-go-grpc
    out: api/gen
    opt: paths=source_relative # 使用相对路径

  # generate rest service code
  - local: protoc-gen-go-http
    out: api/gen
    opt: paths=source_relative # 使用相对路径

  - remote: buf.build/grpc-ecosystem/gateway
    out: api/gen
    opt: paths=source_relative

  # - local: protoc-gen-openapi
  #   out: api/gen
    
  - remote: buf.build/community/google-gnostic-openapi:v0.7.0
  # - remote: buf.build/gnostic/gnostic
    out: api/gen
    opt: 
    - naming=json # 命名约定。使用"proto"则直接从proto文件传递名称。默认为：json
    - depth=2 # 循环消息的递归深度，默认为：2
    - default_response=false # 添加默认响应消息。如果为“true”，则自动为使用google.rpc.Status消息的操作添加默认响应。如果您使用envoy或grpc-gateway进行转码，则非常有用，因为它们使用此类型作为默认错误响应。默认为：true。
    - enum_type=string # 枚举类型的序列化的类型。使用"string"则进行基于字符串的序列化。默认为：integer。
    - output_mode=merged # 输出文件生成模式。默认情况下，只有一个openapi.yaml文件会生成在输出文件夹。使用“source_relative”则会为每一个'[inputfile].proto'文件单独生成一个“[inputfile].openapi.yaml”文件。默认为：merged。
    - fq_schema_naming=false # Schema的命名是否加上包名，为true，则会加上包名，例如：system.service.v1.ListDictDetailResponse，否则为：ListDictDetailResponse。默认为：false。

  # generate kratos errors code
  - local: protoc-gen-go-errors
    out: api/gen
    opt: paths=source_relative # 使用相对路径

  # generate message validator code
  - local: protoc-gen-validate
    out: api/gen
    opt:
      - paths=source_relative # 使用相对路径
      - lang=go