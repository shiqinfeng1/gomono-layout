// Copyright 2024 slw 150627601@qq.com . All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: training/v1/training.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTrainingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainingResponseMultiError, or nil if none found.
func (m *GetTrainingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTraining() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrainingResponseValidationError{
						field:  fmt.Sprintf("Training[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrainingResponseValidationError{
						field:  fmt.Sprintf("Training[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrainingResponseValidationError{
					field:  fmt.Sprintf("Training[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTrainingResponseMultiError(errors)
	}

	return nil
}

// GetTrainingResponseMultiError is an error wrapping multiple validation
// errors returned by GetTrainingResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTrainingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainingResponseMultiError) AllErrors() []error { return m }

// GetTrainingResponseValidationError is the validation error returned by
// GetTrainingResponse.Validate if the designated constraints aren't met.
type GetTrainingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainingResponseValidationError) ErrorName() string {
	return "GetTrainingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainingResponseValidationError{}

// Validate checks the field values on CreateTrainingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTrainingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTrainingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTrainingRequestMultiError, or nil if none found.
func (m *CreateTrainingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTrainingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Notes

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTrainingRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTrainingRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTrainingRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTrainingRequestMultiError(errors)
	}

	return nil
}

// CreateTrainingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTrainingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTrainingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTrainingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTrainingRequestMultiError) AllErrors() []error { return m }

// CreateTrainingRequestValidationError is the validation error returned by
// CreateTrainingRequest.Validate if the designated constraints aren't met.
type CreateTrainingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTrainingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTrainingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTrainingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTrainingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTrainingRequestValidationError) ErrorName() string {
	return "CreateTrainingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTrainingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTrainingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTrainingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTrainingRequestValidationError{}

// Validate checks the field values on CreateTrainingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTrainingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTrainingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTrainingResponseMultiError, or nil if none found.
func (m *CreateTrainingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTrainingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainingUuid

	if len(errors) > 0 {
		return CreateTrainingResponseMultiError(errors)
	}

	return nil
}

// CreateTrainingResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTrainingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTrainingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTrainingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTrainingResponseMultiError) AllErrors() []error { return m }

// CreateTrainingResponseValidationError is the validation error returned by
// CreateTrainingResponse.Validate if the designated constraints aren't met.
type CreateTrainingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTrainingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTrainingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTrainingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTrainingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTrainingResponseValidationError) ErrorName() string {
	return "CreateTrainingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTrainingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTrainingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTrainingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTrainingResponseValidationError{}

// Validate checks the field values on CancelTrainingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTrainingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTrainingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTrainingRequestMultiError, or nil if none found.
func (m *CancelTrainingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTrainingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainingUuid

	if len(errors) > 0 {
		return CancelTrainingRequestMultiError(errors)
	}

	return nil
}

// CancelTrainingRequestMultiError is an error wrapping multiple validation
// errors returned by CancelTrainingRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelTrainingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTrainingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTrainingRequestMultiError) AllErrors() []error { return m }

// CancelTrainingRequestValidationError is the validation error returned by
// CancelTrainingRequest.Validate if the designated constraints aren't met.
type CancelTrainingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTrainingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTrainingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTrainingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTrainingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTrainingRequestValidationError) ErrorName() string {
	return "CancelTrainingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTrainingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTrainingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTrainingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTrainingRequestValidationError{}

// Validate checks the field values on RescheduleTrainingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RescheduleTrainingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RescheduleTrainingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RescheduleTrainingRequestMultiError, or nil if none found.
func (m *RescheduleTrainingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RescheduleTrainingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainingUuid

	// no validation rules for Notes

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RescheduleTrainingRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RescheduleTrainingRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RescheduleTrainingRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RescheduleTrainingRequestMultiError(errors)
	}

	return nil
}

// RescheduleTrainingRequestMultiError is an error wrapping multiple validation
// errors returned by RescheduleTrainingRequest.ValidateAll() if the
// designated constraints aren't met.
type RescheduleTrainingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RescheduleTrainingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RescheduleTrainingRequestMultiError) AllErrors() []error { return m }

// RescheduleTrainingRequestValidationError is the validation error returned by
// RescheduleTrainingRequest.Validate if the designated constraints aren't met.
type RescheduleTrainingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RescheduleTrainingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RescheduleTrainingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RescheduleTrainingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RescheduleTrainingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RescheduleTrainingRequestValidationError) ErrorName() string {
	return "RescheduleTrainingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RescheduleTrainingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRescheduleTrainingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RescheduleTrainingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RescheduleTrainingRequestValidationError{}

// Validate checks the field values on RequestRescheduleTrainingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RequestRescheduleTrainingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestRescheduleTrainingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestRescheduleTrainingRequestMultiError, or nil if none found.
func (m *RequestRescheduleTrainingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestRescheduleTrainingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainingUuid

	// no validation rules for Notes

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestRescheduleTrainingRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestRescheduleTrainingRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestRescheduleTrainingRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestRescheduleTrainingRequestMultiError(errors)
	}

	return nil
}

// RequestRescheduleTrainingRequestMultiError is an error wrapping multiple
// validation errors returned by
// RequestRescheduleTrainingRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestRescheduleTrainingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestRescheduleTrainingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestRescheduleTrainingRequestMultiError) AllErrors() []error { return m }

// RequestRescheduleTrainingRequestValidationError is the validation error
// returned by RequestRescheduleTrainingRequest.Validate if the designated
// constraints aren't met.
type RequestRescheduleTrainingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestRescheduleTrainingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestRescheduleTrainingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestRescheduleTrainingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestRescheduleTrainingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestRescheduleTrainingRequestValidationError) ErrorName() string {
	return "RequestRescheduleTrainingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestRescheduleTrainingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestRescheduleTrainingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestRescheduleTrainingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestRescheduleTrainingRequestValidationError{}

// Validate checks the field values on ApproveRescheduleTrainingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApproveRescheduleTrainingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveRescheduleTrainingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveRescheduleTrainingRequestMultiError, or nil if none found.
func (m *ApproveRescheduleTrainingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveRescheduleTrainingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainingUuid

	if len(errors) > 0 {
		return ApproveRescheduleTrainingRequestMultiError(errors)
	}

	return nil
}

// ApproveRescheduleTrainingRequestMultiError is an error wrapping multiple
// validation errors returned by
// ApproveRescheduleTrainingRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveRescheduleTrainingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveRescheduleTrainingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveRescheduleTrainingRequestMultiError) AllErrors() []error { return m }

// ApproveRescheduleTrainingRequestValidationError is the validation error
// returned by ApproveRescheduleTrainingRequest.Validate if the designated
// constraints aren't met.
type ApproveRescheduleTrainingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveRescheduleTrainingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveRescheduleTrainingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveRescheduleTrainingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveRescheduleTrainingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveRescheduleTrainingRequestValidationError) ErrorName() string {
	return "ApproveRescheduleTrainingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveRescheduleTrainingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveRescheduleTrainingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveRescheduleTrainingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveRescheduleTrainingRequestValidationError{}

// Validate checks the field values on RejectRescheduleTrainingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectRescheduleTrainingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectRescheduleTrainingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RejectRescheduleTrainingRequestMultiError, or nil if none found.
func (m *RejectRescheduleTrainingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectRescheduleTrainingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainingUuid

	if len(errors) > 0 {
		return RejectRescheduleTrainingRequestMultiError(errors)
	}

	return nil
}

// RejectRescheduleTrainingRequestMultiError is an error wrapping multiple
// validation errors returned by RejectRescheduleTrainingRequest.ValidateAll()
// if the designated constraints aren't met.
type RejectRescheduleTrainingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectRescheduleTrainingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectRescheduleTrainingRequestMultiError) AllErrors() []error { return m }

// RejectRescheduleTrainingRequestValidationError is the validation error
// returned by RejectRescheduleTrainingRequest.Validate if the designated
// constraints aren't met.
type RejectRescheduleTrainingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectRescheduleTrainingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectRescheduleTrainingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectRescheduleTrainingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectRescheduleTrainingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectRescheduleTrainingRequestValidationError) ErrorName() string {
	return "RejectRescheduleTrainingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectRescheduleTrainingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectRescheduleTrainingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectRescheduleTrainingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectRescheduleTrainingRequestValidationError{}

// Validate checks the field values on GetTrainingResponse_Training with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainingResponse_Training) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainingResponse_Training with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainingResponse_TrainingMultiError, or nil if none found.
func (m *GetTrainingResponse_Training) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainingResponse_Training) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanBeCancelled

	// no validation rules for MoveProposedBy

	// no validation rules for MoveRequiresAccept

	// no validation rules for Notes

	if all {
		switch v := interface{}(m.GetProposedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainingResponse_TrainingValidationError{
					field:  "ProposedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainingResponse_TrainingValidationError{
					field:  "ProposedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProposedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainingResponse_TrainingValidationError{
				field:  "ProposedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainingResponse_TrainingValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainingResponse_TrainingValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainingResponse_TrainingValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for User

	// no validation rules for UserUuid

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTrainingResponse_TrainingMultiError(errors)
	}

	return nil
}

// GetTrainingResponse_TrainingMultiError is an error wrapping multiple
// validation errors returned by GetTrainingResponse_Training.ValidateAll() if
// the designated constraints aren't met.
type GetTrainingResponse_TrainingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainingResponse_TrainingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainingResponse_TrainingMultiError) AllErrors() []error { return m }

// GetTrainingResponse_TrainingValidationError is the validation error returned
// by GetTrainingResponse_Training.Validate if the designated constraints
// aren't met.
type GetTrainingResponse_TrainingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainingResponse_TrainingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainingResponse_TrainingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainingResponse_TrainingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainingResponse_TrainingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainingResponse_TrainingValidationError) ErrorName() string {
	return "GetTrainingResponse_TrainingValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainingResponse_TrainingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainingResponse_Training.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainingResponse_TrainingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainingResponse_TrainingValidationError{}
