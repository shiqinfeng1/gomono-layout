// Copyright 2024 slw 150627601@qq.com . All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: trainer/v1/trainer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IsHourAvailableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsHourAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsHourAvailableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsHourAvailableRequestMultiError, or nil if none found.
func (m *IsHourAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsHourAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsHourAvailableRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsHourAvailableRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsHourAvailableRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IsHourAvailableRequestMultiError(errors)
	}

	return nil
}

// IsHourAvailableRequestMultiError is an error wrapping multiple validation
// errors returned by IsHourAvailableRequest.ValidateAll() if the designated
// constraints aren't met.
type IsHourAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsHourAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsHourAvailableRequestMultiError) AllErrors() []error { return m }

// IsHourAvailableRequestValidationError is the validation error returned by
// IsHourAvailableRequest.Validate if the designated constraints aren't met.
type IsHourAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsHourAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsHourAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsHourAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsHourAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsHourAvailableRequestValidationError) ErrorName() string {
	return "IsHourAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsHourAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsHourAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsHourAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsHourAvailableRequestValidationError{}

// Validate checks the field values on IsHourAvailableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsHourAvailableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsHourAvailableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsHourAvailableResponseMultiError, or nil if none found.
func (m *IsHourAvailableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsHourAvailableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAvailable

	if len(errors) > 0 {
		return IsHourAvailableResponseMultiError(errors)
	}

	return nil
}

// IsHourAvailableResponseMultiError is an error wrapping multiple validation
// errors returned by IsHourAvailableResponse.ValidateAll() if the designated
// constraints aren't met.
type IsHourAvailableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsHourAvailableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsHourAvailableResponseMultiError) AllErrors() []error { return m }

// IsHourAvailableResponseValidationError is the validation error returned by
// IsHourAvailableResponse.Validate if the designated constraints aren't met.
type IsHourAvailableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsHourAvailableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsHourAvailableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsHourAvailableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsHourAvailableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsHourAvailableResponseValidationError) ErrorName() string {
	return "IsHourAvailableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsHourAvailableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsHourAvailableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsHourAvailableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsHourAvailableResponseValidationError{}

// Validate checks the field values on UpdateHourRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateHourRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHourRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHourRequestMultiError, or nil if none found.
func (m *UpdateHourRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHourRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateHourRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateHourRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHourRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateHourRequestMultiError(errors)
	}

	return nil
}

// UpdateHourRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateHourRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateHourRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHourRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHourRequestMultiError) AllErrors() []error { return m }

// UpdateHourRequestValidationError is the validation error returned by
// UpdateHourRequest.Validate if the designated constraints aren't met.
type UpdateHourRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHourRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHourRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHourRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHourRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHourRequestValidationError) ErrorName() string {
	return "UpdateHourRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHourRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHourRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHourRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHourRequestValidationError{}

// Validate checks the field values on GetTrainerAvailableHoursRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainerAvailableHoursRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainerAvailableHoursRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTrainerAvailableHoursRequestMultiError, or nil if none found.
func (m *GetTrainerAvailableHoursRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainerAvailableHoursRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainerAvailableHoursRequestValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainerAvailableHoursRequestValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTrainerAvailableHoursRequestMultiError(errors)
	}

	return nil
}

// GetTrainerAvailableHoursRequestMultiError is an error wrapping multiple
// validation errors returned by GetTrainerAvailableHoursRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTrainerAvailableHoursRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainerAvailableHoursRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainerAvailableHoursRequestMultiError) AllErrors() []error { return m }

// GetTrainerAvailableHoursRequestValidationError is the validation error
// returned by GetTrainerAvailableHoursRequest.Validate if the designated
// constraints aren't met.
type GetTrainerAvailableHoursRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainerAvailableHoursRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainerAvailableHoursRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainerAvailableHoursRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainerAvailableHoursRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainerAvailableHoursRequestValidationError) ErrorName() string {
	return "GetTrainerAvailableHoursRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainerAvailableHoursRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainerAvailableHoursRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainerAvailableHoursRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainerAvailableHoursRequestValidationError{}

// Validate checks the field values on GetTrainerAvailableHoursRespone with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainerAvailableHoursRespone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainerAvailableHoursRespone with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTrainerAvailableHoursResponeMultiError, or nil if none found.
func (m *GetTrainerAvailableHoursRespone) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainerAvailableHoursRespone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrainerAvailableHoursResponeValidationError{
						field:  fmt.Sprintf("Dates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrainerAvailableHoursResponeValidationError{
						field:  fmt.Sprintf("Dates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrainerAvailableHoursResponeValidationError{
					field:  fmt.Sprintf("Dates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTrainerAvailableHoursResponeMultiError(errors)
	}

	return nil
}

// GetTrainerAvailableHoursResponeMultiError is an error wrapping multiple
// validation errors returned by GetTrainerAvailableHoursRespone.ValidateAll()
// if the designated constraints aren't met.
type GetTrainerAvailableHoursResponeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainerAvailableHoursResponeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainerAvailableHoursResponeMultiError) AllErrors() []error { return m }

// GetTrainerAvailableHoursResponeValidationError is the validation error
// returned by GetTrainerAvailableHoursRespone.Validate if the designated
// constraints aren't met.
type GetTrainerAvailableHoursResponeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainerAvailableHoursResponeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainerAvailableHoursResponeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainerAvailableHoursResponeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainerAvailableHoursResponeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainerAvailableHoursResponeValidationError) ErrorName() string {
	return "GetTrainerAvailableHoursResponeValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainerAvailableHoursResponeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainerAvailableHoursRespone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainerAvailableHoursResponeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainerAvailableHoursResponeValidationError{}

// Validate checks the field values on MakeHourAvailableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MakeHourAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeHourAvailableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeHourAvailableRequestMultiError, or nil if none found.
func (m *MakeHourAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeHourAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTime() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MakeHourAvailableRequestValidationError{
						field:  fmt.Sprintf("Time[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MakeHourAvailableRequestValidationError{
						field:  fmt.Sprintf("Time[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MakeHourAvailableRequestValidationError{
					field:  fmt.Sprintf("Time[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MakeHourAvailableRequestMultiError(errors)
	}

	return nil
}

// MakeHourAvailableRequestMultiError is an error wrapping multiple validation
// errors returned by MakeHourAvailableRequest.ValidateAll() if the designated
// constraints aren't met.
type MakeHourAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeHourAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeHourAvailableRequestMultiError) AllErrors() []error { return m }

// MakeHourAvailableRequestValidationError is the validation error returned by
// MakeHourAvailableRequest.Validate if the designated constraints aren't met.
type MakeHourAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeHourAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeHourAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeHourAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeHourAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeHourAvailableRequestValidationError) ErrorName() string {
	return "MakeHourAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MakeHourAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeHourAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeHourAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeHourAvailableRequestValidationError{}

// Validate checks the field values on MakeHourUnavailableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MakeHourUnavailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeHourUnavailableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeHourUnavailableRequestMultiError, or nil if none found.
func (m *MakeHourUnavailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeHourUnavailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTime() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MakeHourUnavailableRequestValidationError{
						field:  fmt.Sprintf("Time[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MakeHourUnavailableRequestValidationError{
						field:  fmt.Sprintf("Time[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MakeHourUnavailableRequestValidationError{
					field:  fmt.Sprintf("Time[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MakeHourUnavailableRequestMultiError(errors)
	}

	return nil
}

// MakeHourUnavailableRequestMultiError is an error wrapping multiple
// validation errors returned by MakeHourUnavailableRequest.ValidateAll() if
// the designated constraints aren't met.
type MakeHourUnavailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeHourUnavailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeHourUnavailableRequestMultiError) AllErrors() []error { return m }

// MakeHourUnavailableRequestValidationError is the validation error returned
// by MakeHourUnavailableRequest.Validate if the designated constraints aren't met.
type MakeHourUnavailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeHourUnavailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeHourUnavailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeHourUnavailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeHourUnavailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeHourUnavailableRequestValidationError) ErrorName() string {
	return "MakeHourUnavailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MakeHourUnavailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeHourUnavailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeHourUnavailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeHourUnavailableRequestValidationError{}

// Validate checks the field values on GetTrainerAvailableHoursRespone_Hour
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTrainerAvailableHoursRespone_Hour) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainerAvailableHoursRespone_Hour
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTrainerAvailableHoursRespone_HourMultiError, or nil if none found.
func (m *GetTrainerAvailableHoursRespone_Hour) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainerAvailableHoursRespone_Hour) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Available

	// no validation rules for HasTrainingScheduled

	if all {
		switch v := interface{}(m.GetHour()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRespone_HourValidationError{
					field:  "Hour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRespone_HourValidationError{
					field:  "Hour",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHour()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainerAvailableHoursRespone_HourValidationError{
				field:  "Hour",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTrainerAvailableHoursRespone_HourMultiError(errors)
	}

	return nil
}

// GetTrainerAvailableHoursRespone_HourMultiError is an error wrapping multiple
// validation errors returned by
// GetTrainerAvailableHoursRespone_Hour.ValidateAll() if the designated
// constraints aren't met.
type GetTrainerAvailableHoursRespone_HourMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainerAvailableHoursRespone_HourMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainerAvailableHoursRespone_HourMultiError) AllErrors() []error { return m }

// GetTrainerAvailableHoursRespone_HourValidationError is the validation error
// returned by GetTrainerAvailableHoursRespone_Hour.Validate if the designated
// constraints aren't met.
type GetTrainerAvailableHoursRespone_HourValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainerAvailableHoursRespone_HourValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainerAvailableHoursRespone_HourValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainerAvailableHoursRespone_HourValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainerAvailableHoursRespone_HourValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainerAvailableHoursRespone_HourValidationError) ErrorName() string {
	return "GetTrainerAvailableHoursRespone_HourValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainerAvailableHoursRespone_HourValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainerAvailableHoursRespone_Hour.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainerAvailableHoursRespone_HourValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainerAvailableHoursRespone_HourValidationError{}

// Validate checks the field values on GetTrainerAvailableHoursRespone_Date
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTrainerAvailableHoursRespone_Date) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainerAvailableHoursRespone_Date
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTrainerAvailableHoursRespone_DateMultiError, or nil if none found.
func (m *GetTrainerAvailableHoursRespone_Date) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainerAvailableHoursRespone_Date) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRespone_DateValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainerAvailableHoursRespone_DateValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainerAvailableHoursRespone_DateValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HasFreeHours

	for idx, item := range m.GetHours() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrainerAvailableHoursRespone_DateValidationError{
						field:  fmt.Sprintf("Hours[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrainerAvailableHoursRespone_DateValidationError{
						field:  fmt.Sprintf("Hours[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrainerAvailableHoursRespone_DateValidationError{
					field:  fmt.Sprintf("Hours[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTrainerAvailableHoursRespone_DateMultiError(errors)
	}

	return nil
}

// GetTrainerAvailableHoursRespone_DateMultiError is an error wrapping multiple
// validation errors returned by
// GetTrainerAvailableHoursRespone_Date.ValidateAll() if the designated
// constraints aren't met.
type GetTrainerAvailableHoursRespone_DateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainerAvailableHoursRespone_DateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainerAvailableHoursRespone_DateMultiError) AllErrors() []error { return m }

// GetTrainerAvailableHoursRespone_DateValidationError is the validation error
// returned by GetTrainerAvailableHoursRespone_Date.Validate if the designated
// constraints aren't met.
type GetTrainerAvailableHoursRespone_DateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainerAvailableHoursRespone_DateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainerAvailableHoursRespone_DateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainerAvailableHoursRespone_DateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainerAvailableHoursRespone_DateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainerAvailableHoursRespone_DateValidationError) ErrorName() string {
	return "GetTrainerAvailableHoursRespone_DateValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainerAvailableHoursRespone_DateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainerAvailableHoursRespone_Date.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainerAvailableHoursRespone_DateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainerAvailableHoursRespone_DateValidationError{}
